//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Controller.ControllerServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Airplane", Namespace="http://schemas.datacontract.org/2004/07/ATCServer")]
    [System.SerializableAttribute()]
    public partial class Airplane : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FlightNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FuelLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Controller.ControllerServiceReference.Runway RunwayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Controller.ControllerServiceReference.AStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeLandedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightNumber {
            get {
                return this.FlightNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightNumberField, value) != true)) {
                    this.FlightNumberField = value;
                    this.RaisePropertyChanged("FlightNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FuelLevel {
            get {
                return this.FuelLevelField;
            }
            set {
                if ((this.FuelLevelField.Equals(value) != true)) {
                    this.FuelLevelField = value;
                    this.RaisePropertyChanged("FuelLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Controller.ControllerServiceReference.Runway Runway {
            get {
                return this.RunwayField;
            }
            set {
                if ((object.ReferenceEquals(this.RunwayField, value) != true)) {
                    this.RunwayField = value;
                    this.RaisePropertyChanged("Runway");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Controller.ControllerServiceReference.AStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeLanded {
            get {
                return this.TimeLandedField;
            }
            set {
                if ((this.TimeLandedField.Equals(value) != true)) {
                    this.TimeLandedField = value;
                    this.RaisePropertyChanged("TimeLanded");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Runway", Namespace="http://schemas.datacontract.org/2004/07/ATCServer")]
    [System.SerializableAttribute()]
    public partial class Runway : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunwayIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunwayID {
            get {
                return this.RunwayIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RunwayIDField, value) != true)) {
                    this.RunwayIDField = value;
                    this.RaisePropertyChanged("RunwayID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AStatus", Namespace="http://schemas.datacontract.org/2004/07/ATCServer")]
    public enum AStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        On_the_ground = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        On_land = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        In_the_air = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        In_air = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Req_landing = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Landing = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Req_takeoff = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Taking_Off = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Emergency = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Emergency_landing = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wait_takeoff = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wait_emergency = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wait_landing = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Docked = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Abort_takeoff = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Abort_landing = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Abort_taxi = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Taxi_R1 = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Taxi_R2 = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Taxi_R3 = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Null = 20,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Command", Namespace="http://schemas.datacontract.org/2004/07/ATCServer")]
    public enum Command : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Land = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TakeOff = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Abort = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Taxi = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ATCServer", ConfigurationName="ControllerServiceReference.IController", CallbackContract=typeof(Controller.ControllerServiceReference.IControllerCallback))]
    public interface IController {
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetAirportName", ReplyAction="ATCServer/IController/GetAirportNameResponse")]
        string GetAirportName();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetAirportName", ReplyAction="ATCServer/IController/GetAirportNameResponse")]
        System.Threading.Tasks.Task<string> GetAirportNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetAirplaneList", ReplyAction="ATCServer/IController/GetAirplaneListResponse")]
        Controller.ControllerServiceReference.Airplane[] GetAirplaneList();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetAirplaneList", ReplyAction="ATCServer/IController/GetAirplaneListResponse")]
        System.Threading.Tasks.Task<Controller.ControllerServiceReference.Airplane[]> GetAirplaneListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetAirplane", ReplyAction="ATCServer/IController/GetAirplaneResponse")]
        Controller.ControllerServiceReference.Airplane GetAirplane(string FlightNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetAirplane", ReplyAction="ATCServer/IController/GetAirplaneResponse")]
        System.Threading.Tasks.Task<Controller.ControllerServiceReference.Airplane> GetAirplaneAsync(string FlightNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/sendTaxiCommand", ReplyAction="ATCServer/IController/sendTaxiCommandResponse")]
        void sendTaxiCommand(string FlightNumber, string RunwayID);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/sendTaxiCommand", ReplyAction="ATCServer/IController/sendTaxiCommandResponse")]
        System.Threading.Tasks.Task sendTaxiCommandAsync(string FlightNumber, string RunwayID);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/ApproveTakeOffRequest", ReplyAction="ATCServer/IController/ApproveTakeOffRequestResponse")]
        void ApproveTakeOffRequest(string FlightNumber, string RunwayID);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/ApproveTakeOffRequest", ReplyAction="ATCServer/IController/ApproveTakeOffRequestResponse")]
        System.Threading.Tasks.Task ApproveTakeOffRequestAsync(string FlightNumber, string RunwayID);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/ApproveLandRequest", ReplyAction="ATCServer/IController/ApproveLandRequestResponse")]
        void ApproveLandRequest(string FlightNumber, string RunwayID);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/ApproveLandRequest", ReplyAction="ATCServer/IController/ApproveLandRequestResponse")]
        System.Threading.Tasks.Task ApproveLandRequestAsync(string FlightNumber, string RunwayID);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/AbortInTheServer", ReplyAction="ATCServer/IController/AbortInTheServerResponse")]
        void AbortInTheServer(string FlightNumber, string RunwayID);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/AbortInTheServer", ReplyAction="ATCServer/IController/AbortInTheServerResponse")]
        System.Threading.Tasks.Task AbortInTheServerAsync(string FlightNumber, string RunwayID);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetUpdatePosition", ReplyAction="ATCServer/IController/GetUpdatePositionResponse")]
        int GetUpdatePosition();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetUpdatePosition", ReplyAction="ATCServer/IController/GetUpdatePositionResponse")]
        System.Threading.Tasks.Task<int> GetUpdatePositionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/ResetUpdatePosition", ReplyAction="ATCServer/IController/ResetUpdatePositionResponse")]
        void ResetUpdatePosition();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/ResetUpdatePosition", ReplyAction="ATCServer/IController/ResetUpdatePositionResponse")]
        System.Threading.Tasks.Task ResetUpdatePositionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/SubscribeEvent", ReplyAction="ATCServer/IController/SubscribeEventResponse")]
        void SubscribeEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/SubscribeEvent", ReplyAction="ATCServer/IController/SubscribeEventResponse")]
        System.Threading.Tasks.Task SubscribeEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/UnSubscribeEvent", ReplyAction="ATCServer/IController/UnSubscribeEventResponse")]
        void UnSubscribeEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/UnSubscribeEvent", ReplyAction="ATCServer/IController/UnSubscribeEventResponse")]
        System.Threading.Tasks.Task UnSubscribeEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/UpdateStatusFromController", ReplyAction="ATCServer/IController/UpdateStatusFromControllerResponse")]
        void UpdateStatusFromController(string flightNumber, Controller.ControllerServiceReference.AStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/UpdateStatusFromController", ReplyAction="ATCServer/IController/UpdateStatusFromControllerResponse")]
        System.Threading.Tasks.Task UpdateStatusFromControllerAsync(string flightNumber, Controller.ControllerServiceReference.AStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetQueue", ReplyAction="ATCServer/IController/GetQueueResponse")]
        System.Collections.Generic.Queue<int> GetQueue();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetQueue", ReplyAction="ATCServer/IController/GetQueueResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Queue<int>> GetQueueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/LetPilotKnow", ReplyAction="ATCServer/IController/LetPilotKnowResponse")]
        void LetPilotKnow(string flight, Controller.ControllerServiceReference.AStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/LetPilotKnow", ReplyAction="ATCServer/IController/LetPilotKnowResponse")]
        System.Threading.Tasks.Task LetPilotKnowAsync(string flight, Controller.ControllerServiceReference.AStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetStatusDictionaryController", ReplyAction="ATCServer/IController/GetStatusDictionaryControllerResponse")]
        System.Collections.Generic.Dictionary<Controller.ControllerServiceReference.AStatus, string> GetStatusDictionaryController();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetStatusDictionaryController", ReplyAction="ATCServer/IController/GetStatusDictionaryControllerResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Controller.ControllerServiceReference.AStatus, string>> GetStatusDictionaryControllerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetCommandDictionary", ReplyAction="ATCServer/IController/GetCommandDictionaryResponse")]
        System.Collections.Generic.Dictionary<Controller.ControllerServiceReference.Command, string> GetCommandDictionary();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/GetCommandDictionary", ReplyAction="ATCServer/IController/GetCommandDictionaryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Controller.ControllerServiceReference.Command, string>> GetCommandDictionaryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/getRunway", ReplyAction="ATCServer/IController/getRunwayResponse")]
        Controller.ControllerServiceReference.Runway getRunway(string runwayId);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/getRunway", ReplyAction="ATCServer/IController/getRunwayResponse")]
        System.Threading.Tasks.Task<Controller.ControllerServiceReference.Runway> getRunwayAsync(string runwayId);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/getCommandList", ReplyAction="ATCServer/IController/getCommandListResponse")]
        string[] getCommandList();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/getCommandList", ReplyAction="ATCServer/IController/getCommandListResponse")]
        System.Threading.Tasks.Task<string[]> getCommandListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControllerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IController/UserInterface")]
        void UserInterface(string flight, int progress);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IController/AddToListMessage")]
        void AddToListMessage(string flightNumber);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IController/AbortMessage")]
        void AbortMessage(string flightNumber);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IController/RemoveMessage")]
        void RemoveMessage(string flightNumber);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IController/DockedMessage")]
        void DockedMessage(string flightNumber);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IController/RegularUpdate")]
        void RegularUpdate(string flightNumber);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IController/NewPilotRequest")]
        void NewPilotRequest(string flightNumber);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IController/AbortedCommand")]
        void AbortedCommand(string flightNumber, string status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IController/UpdateForLandingProcess")]
        void UpdateForLandingProcess(string flight, Controller.ControllerServiceReference.AStatus status, string RunwayId);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/UpdateForTakingOffProcess", ReplyAction="ATCServer/IController/UpdateForTakingOffProcessResponse")]
        void UpdateForTakingOffProcess(string flight, Controller.ControllerServiceReference.AStatus status, string runwId);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/UpdateForTaxi", ReplyAction="ATCServer/IController/UpdateForTaxiResponse")]
        void UpdateForTaxi(string flight, Controller.ControllerServiceReference.AStatus status, string Runway, bool success);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/SendErrorMessage", ReplyAction="ATCServer/IController/SendErrorMessageResponse")]
        void SendErrorMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IController/AbortFinished", ReplyAction="ATCServer/IController/AbortFinishedResponse")]
        void AbortFinished(string flight, Controller.ControllerServiceReference.AStatus status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IController/RemoveFromListView")]
        void RemoveFromListView(string flight);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControllerChannel : Controller.ControllerServiceReference.IController, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControllerClient : System.ServiceModel.DuplexClientBase<Controller.ControllerServiceReference.IController>, Controller.ControllerServiceReference.IController {
        
        public ControllerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ControllerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ControllerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string GetAirportName() {
            return base.Channel.GetAirportName();
        }
        
        public System.Threading.Tasks.Task<string> GetAirportNameAsync() {
            return base.Channel.GetAirportNameAsync();
        }
        
        public Controller.ControllerServiceReference.Airplane[] GetAirplaneList() {
            return base.Channel.GetAirplaneList();
        }
        
        public System.Threading.Tasks.Task<Controller.ControllerServiceReference.Airplane[]> GetAirplaneListAsync() {
            return base.Channel.GetAirplaneListAsync();
        }
        
        public Controller.ControllerServiceReference.Airplane GetAirplane(string FlightNumber) {
            return base.Channel.GetAirplane(FlightNumber);
        }
        
        public System.Threading.Tasks.Task<Controller.ControllerServiceReference.Airplane> GetAirplaneAsync(string FlightNumber) {
            return base.Channel.GetAirplaneAsync(FlightNumber);
        }
        
        public void sendTaxiCommand(string FlightNumber, string RunwayID) {
            base.Channel.sendTaxiCommand(FlightNumber, RunwayID);
        }
        
        public System.Threading.Tasks.Task sendTaxiCommandAsync(string FlightNumber, string RunwayID) {
            return base.Channel.sendTaxiCommandAsync(FlightNumber, RunwayID);
        }
        
        public void ApproveTakeOffRequest(string FlightNumber, string RunwayID) {
            base.Channel.ApproveTakeOffRequest(FlightNumber, RunwayID);
        }
        
        public System.Threading.Tasks.Task ApproveTakeOffRequestAsync(string FlightNumber, string RunwayID) {
            return base.Channel.ApproveTakeOffRequestAsync(FlightNumber, RunwayID);
        }
        
        public void ApproveLandRequest(string FlightNumber, string RunwayID) {
            base.Channel.ApproveLandRequest(FlightNumber, RunwayID);
        }
        
        public System.Threading.Tasks.Task ApproveLandRequestAsync(string FlightNumber, string RunwayID) {
            return base.Channel.ApproveLandRequestAsync(FlightNumber, RunwayID);
        }
        
        public void AbortInTheServer(string FlightNumber, string RunwayID) {
            base.Channel.AbortInTheServer(FlightNumber, RunwayID);
        }
        
        public System.Threading.Tasks.Task AbortInTheServerAsync(string FlightNumber, string RunwayID) {
            return base.Channel.AbortInTheServerAsync(FlightNumber, RunwayID);
        }
        
        public int GetUpdatePosition() {
            return base.Channel.GetUpdatePosition();
        }
        
        public System.Threading.Tasks.Task<int> GetUpdatePositionAsync() {
            return base.Channel.GetUpdatePositionAsync();
        }
        
        public void ResetUpdatePosition() {
            base.Channel.ResetUpdatePosition();
        }
        
        public System.Threading.Tasks.Task ResetUpdatePositionAsync() {
            return base.Channel.ResetUpdatePositionAsync();
        }
        
        public void SubscribeEvent() {
            base.Channel.SubscribeEvent();
        }
        
        public System.Threading.Tasks.Task SubscribeEventAsync() {
            return base.Channel.SubscribeEventAsync();
        }
        
        public void UnSubscribeEvent() {
            base.Channel.UnSubscribeEvent();
        }
        
        public System.Threading.Tasks.Task UnSubscribeEventAsync() {
            return base.Channel.UnSubscribeEventAsync();
        }
        
        public void UpdateStatusFromController(string flightNumber, Controller.ControllerServiceReference.AStatus status) {
            base.Channel.UpdateStatusFromController(flightNumber, status);
        }
        
        public System.Threading.Tasks.Task UpdateStatusFromControllerAsync(string flightNumber, Controller.ControllerServiceReference.AStatus status) {
            return base.Channel.UpdateStatusFromControllerAsync(flightNumber, status);
        }
        
        public System.Collections.Generic.Queue<int> GetQueue() {
            return base.Channel.GetQueue();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Queue<int>> GetQueueAsync() {
            return base.Channel.GetQueueAsync();
        }
        
        public void LetPilotKnow(string flight, Controller.ControllerServiceReference.AStatus status) {
            base.Channel.LetPilotKnow(flight, status);
        }
        
        public System.Threading.Tasks.Task LetPilotKnowAsync(string flight, Controller.ControllerServiceReference.AStatus status) {
            return base.Channel.LetPilotKnowAsync(flight, status);
        }
        
        public System.Collections.Generic.Dictionary<Controller.ControllerServiceReference.AStatus, string> GetStatusDictionaryController() {
            return base.Channel.GetStatusDictionaryController();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Controller.ControllerServiceReference.AStatus, string>> GetStatusDictionaryControllerAsync() {
            return base.Channel.GetStatusDictionaryControllerAsync();
        }
        
        public System.Collections.Generic.Dictionary<Controller.ControllerServiceReference.Command, string> GetCommandDictionary() {
            return base.Channel.GetCommandDictionary();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Controller.ControllerServiceReference.Command, string>> GetCommandDictionaryAsync() {
            return base.Channel.GetCommandDictionaryAsync();
        }
        
        public Controller.ControllerServiceReference.Runway getRunway(string runwayId) {
            return base.Channel.getRunway(runwayId);
        }
        
        public System.Threading.Tasks.Task<Controller.ControllerServiceReference.Runway> getRunwayAsync(string runwayId) {
            return base.Channel.getRunwayAsync(runwayId);
        }
        
        public string[] getCommandList() {
            return base.Channel.getCommandList();
        }
        
        public System.Threading.Tasks.Task<string[]> getCommandListAsync() {
            return base.Channel.getCommandListAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ATCServer", ConfigurationName="ControllerServiceReference.IAirplane", CallbackContract=typeof(Controller.ControllerServiceReference.IAirplaneCallback))]
    public interface IAirplane {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IAirplane/Connect")]
        void Connect(string FlightNumber, int fuel_level, Controller.ControllerServiceReference.AStatus status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IAirplane/Connect")]
        System.Threading.Tasks.Task ConnectAsync(string FlightNumber, int fuel_level, Controller.ControllerServiceReference.AStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/LandRequest", ReplyAction="ATCServer/IAirplane/LandRequestResponse")]
        void LandRequest(string FlightNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/LandRequest", ReplyAction="ATCServer/IAirplane/LandRequestResponse")]
        System.Threading.Tasks.Task LandRequestAsync(string FlightNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/TakeOffRequest", ReplyAction="ATCServer/IAirplane/TakeOffRequestResponse")]
        void TakeOffRequest(string FlightNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/TakeOffRequest", ReplyAction="ATCServer/IAirplane/TakeOffRequestResponse")]
        System.Threading.Tasks.Task TakeOffRequestAsync(string FlightNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/CancelRequest", ReplyAction="ATCServer/IAirplane/CancelRequestResponse")]
        void CancelRequest(string FlightNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/CancelRequest", ReplyAction="ATCServer/IAirplane/CancelRequestResponse")]
        System.Threading.Tasks.Task CancelRequestAsync(string FlightNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/UpdatePlane", ReplyAction="ATCServer/IAirplane/UpdatePlaneResponse")]
        void UpdatePlane(string FlightNumber, int fuel_level);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/UpdatePlane", ReplyAction="ATCServer/IAirplane/UpdatePlaneResponse")]
        System.Threading.Tasks.Task UpdatePlaneAsync(string FlightNumber, int fuel_level);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/UpdateStatusFromPilot", ReplyAction="ATCServer/IAirplane/UpdateStatusFromPilotResponse")]
        void UpdateStatusFromPilot(string flightNumber, Controller.ControllerServiceReference.AStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/UpdateStatusFromPilot", ReplyAction="ATCServer/IAirplane/UpdateStatusFromPilotResponse")]
        System.Threading.Tasks.Task UpdateStatusFromPilotAsync(string flightNumber, Controller.ControllerServiceReference.AStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/EmergencyRequest", ReplyAction="ATCServer/IAirplane/EmergencyRequestResponse")]
        void EmergencyRequest(string flightNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/EmergencyRequest", ReplyAction="ATCServer/IAirplane/EmergencyRequestResponse")]
        System.Threading.Tasks.Task EmergencyRequestAsync(string flightNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/GetStatusDictionaryPilot", ReplyAction="ATCServer/IAirplane/GetStatusDictionaryPilotResponse")]
        System.Collections.Generic.Dictionary<Controller.ControllerServiceReference.AStatus, string> GetStatusDictionaryPilot();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/GetStatusDictionaryPilot", ReplyAction="ATCServer/IAirplane/GetStatusDictionaryPilotResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Controller.ControllerServiceReference.AStatus, string>> GetStatusDictionaryPilotAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/reportProgress", ReplyAction="ATCServer/IAirplane/reportProgressResponse")]
        void reportProgress(string flight, int progress);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/reportProgress", ReplyAction="ATCServer/IAirplane/reportProgressResponse")]
        System.Threading.Tasks.Task reportProgressAsync(string flight, int progress);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/AbortComplete", ReplyAction="ATCServer/IAirplane/AbortCompleteResponse")]
        void AbortComplete(string flight, Controller.ControllerServiceReference.AStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/AbortComplete", ReplyAction="ATCServer/IAirplane/AbortCompleteResponse")]
        System.Threading.Tasks.Task AbortCompleteAsync(string flight, Controller.ControllerServiceReference.AStatus status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IAirplane/Destroy")]
        void Destroy(string flight);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IAirplane/Destroy")]
        System.Threading.Tasks.Task DestroyAsync(string flight);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAirplaneCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IAirplane/RequestConfirm")]
        void RequestConfirm(string RunwayId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IAirplane/StatusChangedPilot")]
        void StatusChangedPilot(string flightNumber, Controller.ControllerServiceReference.AStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/getFlightNr", ReplyAction="ATCServer/IAirplane/getFlightNrResponse")]
        string getFlightNr();
        
        [System.ServiceModel.OperationContractAttribute(Action="ATCServer/IAirplane/canAbort", ReplyAction="ATCServer/IAirplane/canAbortResponse")]
        bool canAbort();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IAirplane/Aborted")]
        void Aborted(Controller.ControllerServiceReference.AStatus status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ATCServer/IAirplane/AfterAnimation")]
        void AfterAnimation();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAirplaneChannel : Controller.ControllerServiceReference.IAirplane, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AirplaneClient : System.ServiceModel.DuplexClientBase<Controller.ControllerServiceReference.IAirplane>, Controller.ControllerServiceReference.IAirplane {
        
        public AirplaneClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AirplaneClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AirplaneClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AirplaneClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AirplaneClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect(string FlightNumber, int fuel_level, Controller.ControllerServiceReference.AStatus status) {
            base.Channel.Connect(FlightNumber, fuel_level, status);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string FlightNumber, int fuel_level, Controller.ControllerServiceReference.AStatus status) {
            return base.Channel.ConnectAsync(FlightNumber, fuel_level, status);
        }
        
        public void LandRequest(string FlightNumber) {
            base.Channel.LandRequest(FlightNumber);
        }
        
        public System.Threading.Tasks.Task LandRequestAsync(string FlightNumber) {
            return base.Channel.LandRequestAsync(FlightNumber);
        }
        
        public void TakeOffRequest(string FlightNumber) {
            base.Channel.TakeOffRequest(FlightNumber);
        }
        
        public System.Threading.Tasks.Task TakeOffRequestAsync(string FlightNumber) {
            return base.Channel.TakeOffRequestAsync(FlightNumber);
        }
        
        public void CancelRequest(string FlightNumber) {
            base.Channel.CancelRequest(FlightNumber);
        }
        
        public System.Threading.Tasks.Task CancelRequestAsync(string FlightNumber) {
            return base.Channel.CancelRequestAsync(FlightNumber);
        }
        
        public void UpdatePlane(string FlightNumber, int fuel_level) {
            base.Channel.UpdatePlane(FlightNumber, fuel_level);
        }
        
        public System.Threading.Tasks.Task UpdatePlaneAsync(string FlightNumber, int fuel_level) {
            return base.Channel.UpdatePlaneAsync(FlightNumber, fuel_level);
        }
        
        public void UpdateStatusFromPilot(string flightNumber, Controller.ControllerServiceReference.AStatus status) {
            base.Channel.UpdateStatusFromPilot(flightNumber, status);
        }
        
        public System.Threading.Tasks.Task UpdateStatusFromPilotAsync(string flightNumber, Controller.ControllerServiceReference.AStatus status) {
            return base.Channel.UpdateStatusFromPilotAsync(flightNumber, status);
        }
        
        public void EmergencyRequest(string flightNumber) {
            base.Channel.EmergencyRequest(flightNumber);
        }
        
        public System.Threading.Tasks.Task EmergencyRequestAsync(string flightNumber) {
            return base.Channel.EmergencyRequestAsync(flightNumber);
        }
        
        public System.Collections.Generic.Dictionary<Controller.ControllerServiceReference.AStatus, string> GetStatusDictionaryPilot() {
            return base.Channel.GetStatusDictionaryPilot();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Controller.ControllerServiceReference.AStatus, string>> GetStatusDictionaryPilotAsync() {
            return base.Channel.GetStatusDictionaryPilotAsync();
        }
        
        public void reportProgress(string flight, int progress) {
            base.Channel.reportProgress(flight, progress);
        }
        
        public System.Threading.Tasks.Task reportProgressAsync(string flight, int progress) {
            return base.Channel.reportProgressAsync(flight, progress);
        }
        
        public void AbortComplete(string flight, Controller.ControllerServiceReference.AStatus status) {
            base.Channel.AbortComplete(flight, status);
        }
        
        public System.Threading.Tasks.Task AbortCompleteAsync(string flight, Controller.ControllerServiceReference.AStatus status) {
            return base.Channel.AbortCompleteAsync(flight, status);
        }
        
        public void Destroy(string flight) {
            base.Channel.Destroy(flight);
        }
        
        public System.Threading.Tasks.Task DestroyAsync(string flight) {
            return base.Channel.DestroyAsync(flight);
        }
    }
}
